// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteService.API.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NoteService.API.Migrations
{
    [DbContext(typeof(NotesDbContext))]
    [Migration("20241229090235_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NoteService.API.Entities.NotesEntity", b =>
                {
                    b.Property<Guid>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TagNoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NoteId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TagNoteId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("NoteService.API.Entities.ProjectsEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TagProjectId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId");

                    b.HasIndex("TagProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NoteService.API.Entities.TagNotesEntity", b =>
                {
                    b.Property<int>("TagNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagNoteId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagNoteId");

                    b.ToTable("TagNotes");

                    b.HasData(
                        new
                        {
                            TagNoteId = 1,
                            Name = "Low"
                        },
                        new
                        {
                            TagNoteId = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            TagNoteId = 3,
                            Name = "High"
                        });
                });

            modelBuilder.Entity("NoteService.API.Entities.TagProjectsEntity", b =>
                {
                    b.Property<int>("TagProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagProjectId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagProjectId");

                    b.ToTable("TagProjects");

                    b.HasData(
                        new
                        {
                            TagProjectId = 1,
                            Name = "Inactive"
                        },
                        new
                        {
                            TagProjectId = 2,
                            Name = "InProgress"
                        },
                        new
                        {
                            TagProjectId = 3,
                            Name = "Suspended"
                        },
                        new
                        {
                            TagProjectId = 4,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("NoteService.API.Entities.NotesEntity", b =>
                {
                    b.HasOne("NoteService.API.Entities.ProjectsEntity", "Project")
                        .WithMany("Note")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteService.API.Entities.TagNotesEntity", "TagNote")
                        .WithMany("Note")
                        .HasForeignKey("TagNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TagNote");
                });

            modelBuilder.Entity("NoteService.API.Entities.ProjectsEntity", b =>
                {
                    b.HasOne("NoteService.API.Entities.TagProjectsEntity", "TagProject")
                        .WithMany("Project")
                        .HasForeignKey("TagProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagProject");
                });

            modelBuilder.Entity("NoteService.API.Entities.ProjectsEntity", b =>
                {
                    b.Navigation("Note");
                });

            modelBuilder.Entity("NoteService.API.Entities.TagNotesEntity", b =>
                {
                    b.Navigation("Note");
                });

            modelBuilder.Entity("NoteService.API.Entities.TagProjectsEntity", b =>
                {
                    b.Navigation("Project");
                });
#pragma warning restore 612, 618
        }
    }
}
